/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { expenseControllerCreate } from '../fn/expense-controller/expense-controller-create';
import { ExpenseControllerCreate$Params } from '../fn/expense-controller/expense-controller-create';
import { expenseControllerGetById } from '../fn/expense-controller/expense-controller-get-by-id';
import { ExpenseControllerGetById$Params } from '../fn/expense-controller/expense-controller-get-by-id';
import { expenseControllerGetByUserId } from '../fn/expense-controller/expense-controller-get-by-user-id';
import { ExpenseControllerGetByUserId$Params } from '../fn/expense-controller/expense-controller-get-by-user-id';
import { expenseControllerListAll } from '../fn/expense-controller/expense-controller-list-all';
import { ExpenseControllerListAll$Params } from '../fn/expense-controller/expense-controller-list-all';
import { expenseControllerListAllPage } from '../fn/expense-controller/expense-controller-list-all-page';
import { ExpenseControllerListAllPage$Params } from '../fn/expense-controller/expense-controller-list-all-page';
import { expenseControllerListAllPageByUser } from '../fn/expense-controller/expense-controller-list-all-page-by-user';
import { ExpenseControllerListAllPageByUser$Params } from '../fn/expense-controller/expense-controller-list-all-page-by-user';
import { expenseControllerRemove } from '../fn/expense-controller/expense-controller-remove';
import { ExpenseControllerRemove$Params } from '../fn/expense-controller/expense-controller-remove';
import { expenseControllerSearchFieldsAction } from '../fn/expense-controller/expense-controller-search-fields-action';
import { ExpenseControllerSearchFieldsAction$Params } from '../fn/expense-controller/expense-controller-search-fields-action';
import { expenseControllerSearchFieldsActionPage } from '../fn/expense-controller/expense-controller-search-fields-action-page';
import { expenseControllerSearchFieldsActionPage_1 } from '../fn/expense-controller/expense-controller-search-fields-action-page-1';
import { ExpenseControllerSearchFieldsActionPage_1$Params } from '../fn/expense-controller/expense-controller-search-fields-action-page-1';
import { ExpenseControllerSearchFieldsActionPage$Params } from '../fn/expense-controller/expense-controller-search-fields-action-page';
import { expenseControllerSearchFieldsList } from '../fn/expense-controller/expense-controller-search-fields-list';
import { ExpenseControllerSearchFieldsList$Params } from '../fn/expense-controller/expense-controller-search-fields-list';
import { expenseControllerUpdate } from '../fn/expense-controller/expense-controller-update';
import { ExpenseControllerUpdate$Params } from '../fn/expense-controller/expense-controller-update';
import { ExpenseDto } from '../models/expense-dto';
import { ExpenseListDto } from '../models/expense-list-dto';
import { PageExpenseListDto } from '../models/page-expense-list-dto';
import { SearchField } from '../models/search-field';

@Injectable({ providedIn: 'root' })
export class ExpenseControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `expenseControllerGetById()` */
  static readonly ExpenseControllerGetByIdPath = '/v1/expenses/{id}';

  /**
   * Obter os dados completos de uma entidiade pelo id informado!
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `expenseControllerGetById()` instead.
   *
   * This method doesn't expect any request body.
   */
  expenseControllerGetById$Response(params: ExpenseControllerGetById$Params, context?: HttpContext): Observable<StrictHttpResponse<ExpenseDto>> {
    return expenseControllerGetById(this.http, this.rootUrl, params, context);
  }

  /**
   * Obter os dados completos de uma entidiade pelo id informado!
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `expenseControllerGetById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  expenseControllerGetById(params: ExpenseControllerGetById$Params, context?: HttpContext): Observable<ExpenseDto> {
    return this.expenseControllerGetById$Response(params, context).pipe(
      map((r: StrictHttpResponse<ExpenseDto>): ExpenseDto => r.body)
    );
  }

  /** Path part for operation `expenseControllerUpdate()` */
  static readonly ExpenseControllerUpdatePath = '/v1/expenses/{id}';

  /**
   * Método utilizado para altlerar os dados de uma entidiade
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `expenseControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  expenseControllerUpdate$Response(params: ExpenseControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<ExpenseDto>> {
    return expenseControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * Método utilizado para altlerar os dados de uma entidiade
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `expenseControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  expenseControllerUpdate(params: ExpenseControllerUpdate$Params, context?: HttpContext): Observable<ExpenseDto> {
    return this.expenseControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<ExpenseDto>): ExpenseDto => r.body)
    );
  }

  /** Path part for operation `expenseControllerRemove()` */
  static readonly ExpenseControllerRemovePath = '/v1/expenses/{id}';

  /**
   * Método utilizado para remover uma entidiade pela id informado
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `expenseControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  expenseControllerRemove$Response(params: ExpenseControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<ExpenseDto>> {
    return expenseControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * Método utilizado para remover uma entidiade pela id informado
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `expenseControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  expenseControllerRemove(params: ExpenseControllerRemove$Params, context?: HttpContext): Observable<ExpenseDto> {
    return this.expenseControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<ExpenseDto>): ExpenseDto => r.body)
    );
  }

  /** Path part for operation `expenseControllerListAll()` */
  static readonly ExpenseControllerListAllPath = '/v1/expenses';

  /**
   * lista todos modelos
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `expenseControllerListAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  expenseControllerListAll$Response(params?: ExpenseControllerListAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ExpenseListDto>>> {
    return expenseControllerListAll(this.http, this.rootUrl, params, context);
  }

  /**
   * lista todos modelos
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `expenseControllerListAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  expenseControllerListAll(params?: ExpenseControllerListAll$Params, context?: HttpContext): Observable<Array<ExpenseListDto>> {
    return this.expenseControllerListAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ExpenseListDto>>): Array<ExpenseListDto> => r.body)
    );
  }

  /** Path part for operation `expenseControllerCreate()` */
  static readonly ExpenseControllerCreatePath = '/v1/expenses';

  /**
   * Método utilizado para realizar a inclusão de um entidade
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `expenseControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  expenseControllerCreate$Response(params: ExpenseControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<ExpenseDto>> {
    return expenseControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * Método utilizado para realizar a inclusão de um entidade
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `expenseControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  expenseControllerCreate(params: ExpenseControllerCreate$Params, context?: HttpContext): Observable<ExpenseDto> {
    return this.expenseControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<ExpenseDto>): ExpenseDto => r.body)
    );
  }

  /** Path part for operation `expenseControllerSearchFieldsList()` */
  static readonly ExpenseControllerSearchFieldsListPath = '/v1/expenses/search-fields';

  /**
   * Listagem dos campos de busca
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `expenseControllerSearchFieldsList()` instead.
   *
   * This method doesn't expect any request body.
   */
  expenseControllerSearchFieldsList$Response(params?: ExpenseControllerSearchFieldsList$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SearchField>>> {
    return expenseControllerSearchFieldsList(this.http, this.rootUrl, params, context);
  }

  /**
   * Listagem dos campos de busca
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `expenseControllerSearchFieldsList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  expenseControllerSearchFieldsList(params?: ExpenseControllerSearchFieldsList$Params, context?: HttpContext): Observable<Array<SearchField>> {
    return this.expenseControllerSearchFieldsList$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SearchField>>): Array<SearchField> => r.body)
    );
  }

  /** Path part for operation `expenseControllerSearchFieldsAction()` */
  static readonly ExpenseControllerSearchFieldsActionPath = '/v1/expenses/search-fields';

  /**
   * Realiza a busca pelos valores dos campos informados
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `expenseControllerSearchFieldsAction()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  expenseControllerSearchFieldsAction$Response(params: ExpenseControllerSearchFieldsAction$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ExpenseListDto>>> {
    return expenseControllerSearchFieldsAction(this.http, this.rootUrl, params, context);
  }

  /**
   * Realiza a busca pelos valores dos campos informados
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `expenseControllerSearchFieldsAction$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  expenseControllerSearchFieldsAction(params: ExpenseControllerSearchFieldsAction$Params, context?: HttpContext): Observable<Array<ExpenseListDto>> {
    return this.expenseControllerSearchFieldsAction$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ExpenseListDto>>): Array<ExpenseListDto> => r.body)
    );
  }

  /** Path part for operation `expenseControllerSearchFieldsActionPage()` */
  static readonly ExpenseControllerSearchFieldsActionPagePath = '/v1/expenses/search-fields/page';

  /**
   * Realiza a busca pelos valores dos campos informados
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `expenseControllerSearchFieldsActionPage()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  expenseControllerSearchFieldsActionPage$Response(params: ExpenseControllerSearchFieldsActionPage$Params, context?: HttpContext): Observable<StrictHttpResponse<PageExpenseListDto>> {
    return expenseControllerSearchFieldsActionPage(this.http, this.rootUrl, params, context);
  }

  /**
   * Realiza a busca pelos valores dos campos informados
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `expenseControllerSearchFieldsActionPage$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  expenseControllerSearchFieldsActionPage(params: ExpenseControllerSearchFieldsActionPage$Params, context?: HttpContext): Observable<PageExpenseListDto> {
    return this.expenseControllerSearchFieldsActionPage$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageExpenseListDto>): PageExpenseListDto => r.body)
    );
  }

  /** Path part for operation `expenseControllerSearchFieldsActionPage_1()` */
  static readonly ExpenseControllerSearchFieldsActionPage_1Path = '/v1/expenses/search-fields/page/user/{id}';

  /**
   * Realiza a busca pelos valores dos campos informados
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `expenseControllerSearchFieldsActionPage_1()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  expenseControllerSearchFieldsActionPage_1$Response(params: ExpenseControllerSearchFieldsActionPage_1$Params, context?: HttpContext): Observable<StrictHttpResponse<PageExpenseListDto>> {
    return expenseControllerSearchFieldsActionPage_1(this.http, this.rootUrl, params, context);
  }

  /**
   * Realiza a busca pelos valores dos campos informados
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `expenseControllerSearchFieldsActionPage_1$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  expenseControllerSearchFieldsActionPage_1(params: ExpenseControllerSearchFieldsActionPage_1$Params, context?: HttpContext): Observable<PageExpenseListDto> {
    return this.expenseControllerSearchFieldsActionPage_1$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageExpenseListDto>): PageExpenseListDto => r.body)
    );
  }

  /** Path part for operation `expenseControllerGetByUserId()` */
  static readonly ExpenseControllerGetByUserIdPath = '/v1/expenses/user/{id}';

  /**
   * Obter os dados completos de uma entidiade pelo id do usuario informado!
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `expenseControllerGetByUserId()` instead.
   *
   * This method doesn't expect any request body.
   */
  expenseControllerGetByUserId$Response(params: ExpenseControllerGetByUserId$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<ExpenseListDto>>> {
    return expenseControllerGetByUserId(this.http, this.rootUrl, params, context);
  }

  /**
   * Obter os dados completos de uma entidiade pelo id do usuario informado!
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `expenseControllerGetByUserId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  expenseControllerGetByUserId(params: ExpenseControllerGetByUserId$Params, context?: HttpContext): Observable<Array<ExpenseListDto>> {
    return this.expenseControllerGetByUserId$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<ExpenseListDto>>): Array<ExpenseListDto> => r.body)
    );
  }

  /** Path part for operation `expenseControllerListAllPage()` */
  static readonly ExpenseControllerListAllPagePath = '/v1/expenses/page';

  /**
   * lista todos modelos paginada
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `expenseControllerListAllPage()` instead.
   *
   * This method doesn't expect any request body.
   */
  expenseControllerListAllPage$Response(params: ExpenseControllerListAllPage$Params, context?: HttpContext): Observable<StrictHttpResponse<PageExpenseListDto>> {
    return expenseControllerListAllPage(this.http, this.rootUrl, params, context);
  }

  /**
   * lista todos modelos paginada
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `expenseControllerListAllPage$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  expenseControllerListAllPage(params: ExpenseControllerListAllPage$Params, context?: HttpContext): Observable<PageExpenseListDto> {
    return this.expenseControllerListAllPage$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageExpenseListDto>): PageExpenseListDto => r.body)
    );
  }

  /** Path part for operation `expenseControllerListAllPageByUser()` */
  static readonly ExpenseControllerListAllPageByUserPath = '/v1/expenses/page/user/{id}';

  /**
   * lista todos modelos paginada
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `expenseControllerListAllPageByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  expenseControllerListAllPageByUser$Response(params: ExpenseControllerListAllPageByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<PageExpenseListDto>> {
    return expenseControllerListAllPageByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * lista todos modelos paginada
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `expenseControllerListAllPageByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  expenseControllerListAllPageByUser(params: ExpenseControllerListAllPageByUser$Params, context?: HttpContext): Observable<PageExpenseListDto> {
    return this.expenseControllerListAllPageByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageExpenseListDto>): PageExpenseListDto => r.body)
    );
  }

}
