/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { notificationPreferenceControllerCreate } from '../fn/notification-preference-controller/notification-preference-controller-create';
import { NotificationPreferenceControllerCreate$Params } from '../fn/notification-preference-controller/notification-preference-controller-create';
import { notificationPreferenceControllerGetById } from '../fn/notification-preference-controller/notification-preference-controller-get-by-id';
import { NotificationPreferenceControllerGetById$Params } from '../fn/notification-preference-controller/notification-preference-controller-get-by-id';
import { notificationPreferenceControllerListAll } from '../fn/notification-preference-controller/notification-preference-controller-list-all';
import { NotificationPreferenceControllerListAll$Params } from '../fn/notification-preference-controller/notification-preference-controller-list-all';
import { notificationPreferenceControllerListAllPage } from '../fn/notification-preference-controller/notification-preference-controller-list-all-page';
import { NotificationPreferenceControllerListAllPage$Params } from '../fn/notification-preference-controller/notification-preference-controller-list-all-page';
import { notificationPreferenceControllerRemove } from '../fn/notification-preference-controller/notification-preference-controller-remove';
import { NotificationPreferenceControllerRemove$Params } from '../fn/notification-preference-controller/notification-preference-controller-remove';
import { notificationPreferenceControllerSearchFieldsAction } from '../fn/notification-preference-controller/notification-preference-controller-search-fields-action';
import { NotificationPreferenceControllerSearchFieldsAction$Params } from '../fn/notification-preference-controller/notification-preference-controller-search-fields-action';
import { notificationPreferenceControllerSearchFieldsActionPage } from '../fn/notification-preference-controller/notification-preference-controller-search-fields-action-page';
import { NotificationPreferenceControllerSearchFieldsActionPage$Params } from '../fn/notification-preference-controller/notification-preference-controller-search-fields-action-page';
import { notificationPreferenceControllerSearchFieldsList } from '../fn/notification-preference-controller/notification-preference-controller-search-fields-list';
import { NotificationPreferenceControllerSearchFieldsList$Params } from '../fn/notification-preference-controller/notification-preference-controller-search-fields-list';
import { notificationPreferenceControllerUpdate } from '../fn/notification-preference-controller/notification-preference-controller-update';
import { NotificationPreferenceControllerUpdate$Params } from '../fn/notification-preference-controller/notification-preference-controller-update';
import { NotificationPreferenceDto } from '../models/notification-preference-dto';
import { PageNotificationPreferenceDto } from '../models/page-notification-preference-dto';
import { SearchField } from '../models/search-field';

@Injectable({ providedIn: 'root' })
export class NotificationPreferenceControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `notificationPreferenceControllerGetById()` */
  static readonly NotificationPreferenceControllerGetByIdPath = '/1.0/notification-preferences/{id}';

  /**
   * Obter os dados completos de uma entidiade pelo id informado!
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `notificationPreferenceControllerGetById()` instead.
   *
   * This method doesn't expect any request body.
   */
  notificationPreferenceControllerGetById$Response(params: NotificationPreferenceControllerGetById$Params, context?: HttpContext): Observable<StrictHttpResponse<NotificationPreferenceDto>> {
    return notificationPreferenceControllerGetById(this.http, this.rootUrl, params, context);
  }

  /**
   * Obter os dados completos de uma entidiade pelo id informado!
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `notificationPreferenceControllerGetById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  notificationPreferenceControllerGetById(params: NotificationPreferenceControllerGetById$Params, context?: HttpContext): Observable<NotificationPreferenceDto> {
    return this.notificationPreferenceControllerGetById$Response(params, context).pipe(
      map((r: StrictHttpResponse<NotificationPreferenceDto>): NotificationPreferenceDto => r.body)
    );
  }

  /** Path part for operation `notificationPreferenceControllerUpdate()` */
  static readonly NotificationPreferenceControllerUpdatePath = '/1.0/notification-preferences/{id}';

  /**
   * Método utilizado para altlerar os dados de uma entidiade
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `notificationPreferenceControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  notificationPreferenceControllerUpdate$Response(params: NotificationPreferenceControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<NotificationPreferenceDto>> {
    return notificationPreferenceControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * Método utilizado para altlerar os dados de uma entidiade
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `notificationPreferenceControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  notificationPreferenceControllerUpdate(params: NotificationPreferenceControllerUpdate$Params, context?: HttpContext): Observable<NotificationPreferenceDto> {
    return this.notificationPreferenceControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<NotificationPreferenceDto>): NotificationPreferenceDto => r.body)
    );
  }

  /** Path part for operation `notificationPreferenceControllerRemove()` */
  static readonly NotificationPreferenceControllerRemovePath = '/1.0/notification-preferences/{id}';

  /**
   * Método utilizado para remover uma entidiade pela id informado
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `notificationPreferenceControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  notificationPreferenceControllerRemove$Response(params: NotificationPreferenceControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<NotificationPreferenceDto>> {
    return notificationPreferenceControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * Método utilizado para remover uma entidiade pela id informado
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `notificationPreferenceControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  notificationPreferenceControllerRemove(params: NotificationPreferenceControllerRemove$Params, context?: HttpContext): Observable<NotificationPreferenceDto> {
    return this.notificationPreferenceControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<NotificationPreferenceDto>): NotificationPreferenceDto => r.body)
    );
  }

  /** Path part for operation `notificationPreferenceControllerListAll()` */
  static readonly NotificationPreferenceControllerListAllPath = '/1.0/notification-preferences';

  /**
   * lista todos modelos
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `notificationPreferenceControllerListAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  notificationPreferenceControllerListAll$Response(params?: NotificationPreferenceControllerListAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<NotificationPreferenceDto>>> {
    return notificationPreferenceControllerListAll(this.http, this.rootUrl, params, context);
  }

  /**
   * lista todos modelos
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `notificationPreferenceControllerListAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  notificationPreferenceControllerListAll(params?: NotificationPreferenceControllerListAll$Params, context?: HttpContext): Observable<Array<NotificationPreferenceDto>> {
    return this.notificationPreferenceControllerListAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<NotificationPreferenceDto>>): Array<NotificationPreferenceDto> => r.body)
    );
  }

  /** Path part for operation `notificationPreferenceControllerCreate()` */
  static readonly NotificationPreferenceControllerCreatePath = '/1.0/notification-preferences';

  /**
   * Método utilizado para realizar a inclusão de um entidade
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `notificationPreferenceControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  notificationPreferenceControllerCreate$Response(params: NotificationPreferenceControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<NotificationPreferenceDto>> {
    return notificationPreferenceControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * Método utilizado para realizar a inclusão de um entidade
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `notificationPreferenceControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  notificationPreferenceControllerCreate(params: NotificationPreferenceControllerCreate$Params, context?: HttpContext): Observable<NotificationPreferenceDto> {
    return this.notificationPreferenceControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<NotificationPreferenceDto>): NotificationPreferenceDto => r.body)
    );
  }

  /** Path part for operation `notificationPreferenceControllerSearchFieldsList()` */
  static readonly NotificationPreferenceControllerSearchFieldsListPath = '/1.0/notification-preferences/search-fields';

  /**
   * Listagem dos campos de busca
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `notificationPreferenceControllerSearchFieldsList()` instead.
   *
   * This method doesn't expect any request body.
   */
  notificationPreferenceControllerSearchFieldsList$Response(params?: NotificationPreferenceControllerSearchFieldsList$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SearchField>>> {
    return notificationPreferenceControllerSearchFieldsList(this.http, this.rootUrl, params, context);
  }

  /**
   * Listagem dos campos de busca
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `notificationPreferenceControllerSearchFieldsList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  notificationPreferenceControllerSearchFieldsList(params?: NotificationPreferenceControllerSearchFieldsList$Params, context?: HttpContext): Observable<Array<SearchField>> {
    return this.notificationPreferenceControllerSearchFieldsList$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SearchField>>): Array<SearchField> => r.body)
    );
  }

  /** Path part for operation `notificationPreferenceControllerSearchFieldsAction()` */
  static readonly NotificationPreferenceControllerSearchFieldsActionPath = '/1.0/notification-preferences/search-fields';

  /**
   * Realiza a busca pelos valores dos campos informados
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `notificationPreferenceControllerSearchFieldsAction()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  notificationPreferenceControllerSearchFieldsAction$Response(params: NotificationPreferenceControllerSearchFieldsAction$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<NotificationPreferenceDto>>> {
    return notificationPreferenceControllerSearchFieldsAction(this.http, this.rootUrl, params, context);
  }

  /**
   * Realiza a busca pelos valores dos campos informados
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `notificationPreferenceControllerSearchFieldsAction$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  notificationPreferenceControllerSearchFieldsAction(params: NotificationPreferenceControllerSearchFieldsAction$Params, context?: HttpContext): Observable<Array<NotificationPreferenceDto>> {
    return this.notificationPreferenceControllerSearchFieldsAction$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<NotificationPreferenceDto>>): Array<NotificationPreferenceDto> => r.body)
    );
  }

  /** Path part for operation `notificationPreferenceControllerSearchFieldsActionPage()` */
  static readonly NotificationPreferenceControllerSearchFieldsActionPagePath = '/1.0/notification-preferences/search-fields/page';

  /**
   * Realiza a busca pelos valores dos campos informados
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `notificationPreferenceControllerSearchFieldsActionPage()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  notificationPreferenceControllerSearchFieldsActionPage$Response(params: NotificationPreferenceControllerSearchFieldsActionPage$Params, context?: HttpContext): Observable<StrictHttpResponse<PageNotificationPreferenceDto>> {
    return notificationPreferenceControllerSearchFieldsActionPage(this.http, this.rootUrl, params, context);
  }

  /**
   * Realiza a busca pelos valores dos campos informados
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `notificationPreferenceControllerSearchFieldsActionPage$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  notificationPreferenceControllerSearchFieldsActionPage(params: NotificationPreferenceControllerSearchFieldsActionPage$Params, context?: HttpContext): Observable<PageNotificationPreferenceDto> {
    return this.notificationPreferenceControllerSearchFieldsActionPage$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageNotificationPreferenceDto>): PageNotificationPreferenceDto => r.body)
    );
  }

  /** Path part for operation `notificationPreferenceControllerListAllPage()` */
  static readonly NotificationPreferenceControllerListAllPagePath = '/1.0/notification-preferences/page';

  /**
   * lista todos modelos paginada
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `notificationPreferenceControllerListAllPage()` instead.
   *
   * This method doesn't expect any request body.
   */
  notificationPreferenceControllerListAllPage$Response(params: NotificationPreferenceControllerListAllPage$Params, context?: HttpContext): Observable<StrictHttpResponse<PageNotificationPreferenceDto>> {
    return notificationPreferenceControllerListAllPage(this.http, this.rootUrl, params, context);
  }

  /**
   * lista todos modelos paginada
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `notificationPreferenceControllerListAllPage$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  notificationPreferenceControllerListAllPage(params: NotificationPreferenceControllerListAllPage$Params, context?: HttpContext): Observable<PageNotificationPreferenceDto> {
    return this.notificationPreferenceControllerListAllPage$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageNotificationPreferenceDto>): PageNotificationPreferenceDto => r.body)
    );
  }

}
