/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { updateEmail } from '../fn/settings-controller/update-email';
import { UpdateEmail$Params } from '../fn/settings-controller/update-email';
import { updateNotificationPreference } from '../fn/settings-controller/update-notification-preference';
import { UpdateNotificationPreference$Params } from '../fn/settings-controller/update-notification-preference';

@Injectable({ providedIn: 'root' })
export class SettingsControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `updateNotificationPreference()` */
  static readonly UpdateNotificationPreferencePath = '/api/settings/{userId}/notifications';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateNotificationPreference()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateNotificationPreference$Response(params: UpdateNotificationPreference$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateNotificationPreference(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateNotificationPreference$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateNotificationPreference(params: UpdateNotificationPreference$Params, context?: HttpContext): Observable<void> {
    return this.updateNotificationPreference$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

  /** Path part for operation `updateEmail()` */
  static readonly UpdateEmailPath = '/api/settings/{userId}/email';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `updateEmail()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateEmail$Response(params: UpdateEmail$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return updateEmail(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `updateEmail$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  updateEmail(params: UpdateEmail$Params, context?: HttpContext): Observable<void> {
    return this.updateEmail$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
