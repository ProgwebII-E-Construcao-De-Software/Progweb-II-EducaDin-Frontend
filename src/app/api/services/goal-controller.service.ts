/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { goalControllerCreate } from '../fn/goal-controller/goal-controller-create';
import { GoalControllerCreate$Params } from '../fn/goal-controller/goal-controller-create';
import { goalControllerGetById } from '../fn/goal-controller/goal-controller-get-by-id';
import { GoalControllerGetById$Params } from '../fn/goal-controller/goal-controller-get-by-id';
import { goalControllerGetByUserId } from '../fn/goal-controller/goal-controller-get-by-user-id';
import { GoalControllerGetByUserId$Params } from '../fn/goal-controller/goal-controller-get-by-user-id';
import { goalControllerListAll } from '../fn/goal-controller/goal-controller-list-all';
import { GoalControllerListAll$Params } from '../fn/goal-controller/goal-controller-list-all';
import { goalControllerListAllPage } from '../fn/goal-controller/goal-controller-list-all-page';
import { GoalControllerListAllPage$Params } from '../fn/goal-controller/goal-controller-list-all-page';
import { goalControllerListAllPageByUser } from '../fn/goal-controller/goal-controller-list-all-page-by-user';
import { GoalControllerListAllPageByUser$Params } from '../fn/goal-controller/goal-controller-list-all-page-by-user';
import { goalControllerRemove } from '../fn/goal-controller/goal-controller-remove';
import { GoalControllerRemove$Params } from '../fn/goal-controller/goal-controller-remove';
import { goalControllerSearchFieldsAction } from '../fn/goal-controller/goal-controller-search-fields-action';
import { GoalControllerSearchFieldsAction$Params } from '../fn/goal-controller/goal-controller-search-fields-action';
import { goalControllerSearchFieldsActionPage } from '../fn/goal-controller/goal-controller-search-fields-action-page';
import { goalControllerSearchFieldsActionPage_1 } from '../fn/goal-controller/goal-controller-search-fields-action-page-1';
import { GoalControllerSearchFieldsActionPage_1$Params } from '../fn/goal-controller/goal-controller-search-fields-action-page-1';
import { GoalControllerSearchFieldsActionPage$Params } from '../fn/goal-controller/goal-controller-search-fields-action-page';
import { goalControllerSearchFieldsList } from '../fn/goal-controller/goal-controller-search-fields-list';
import { GoalControllerSearchFieldsList$Params } from '../fn/goal-controller/goal-controller-search-fields-list';
import { goalControllerUpdate } from '../fn/goal-controller/goal-controller-update';
import { GoalControllerUpdate$Params } from '../fn/goal-controller/goal-controller-update';
import { GoalDto } from '../models/goal-dto';
import { GoalListDto } from '../models/goal-list-dto';
import { PageGoalListDto } from '../models/page-goal-list-dto';
import { SearchField } from '../models/search-field';

@Injectable({ providedIn: 'root' })
export class GoalControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `goalControllerGetById()` */
  static readonly GoalControllerGetByIdPath = '/v1/goals/{id}';

  /**
   * Obter os dados completos de uma entidiade pelo id informado!
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `goalControllerGetById()` instead.
   *
   * This method doesn't expect any request body.
   */
  goalControllerGetById$Response(params: GoalControllerGetById$Params, context?: HttpContext): Observable<StrictHttpResponse<GoalDto>> {
    return goalControllerGetById(this.http, this.rootUrl, params, context);
  }

  /**
   * Obter os dados completos de uma entidiade pelo id informado!
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `goalControllerGetById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  goalControllerGetById(params: GoalControllerGetById$Params, context?: HttpContext): Observable<GoalDto> {
    return this.goalControllerGetById$Response(params, context).pipe(
      map((r: StrictHttpResponse<GoalDto>): GoalDto => r.body)
    );
  }

  /** Path part for operation `goalControllerUpdate()` */
  static readonly GoalControllerUpdatePath = '/v1/goals/{id}';

  /**
   * Método utilizado para altlerar os dados de uma entidiade
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `goalControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  goalControllerUpdate$Response(params: GoalControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<GoalDto>> {
    return goalControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * Método utilizado para altlerar os dados de uma entidiade
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `goalControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  goalControllerUpdate(params: GoalControllerUpdate$Params, context?: HttpContext): Observable<GoalDto> {
    return this.goalControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<GoalDto>): GoalDto => r.body)
    );
  }

  /** Path part for operation `goalControllerRemove()` */
  static readonly GoalControllerRemovePath = '/v1/goals/{id}';

  /**
   * Método utilizado para remover uma entidiade pela id informado
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `goalControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  goalControllerRemove$Response(params: GoalControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<GoalDto>> {
    return goalControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * Método utilizado para remover uma entidiade pela id informado
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `goalControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  goalControllerRemove(params: GoalControllerRemove$Params, context?: HttpContext): Observable<GoalDto> {
    return this.goalControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<GoalDto>): GoalDto => r.body)
    );
  }

  /** Path part for operation `goalControllerListAll()` */
  static readonly GoalControllerListAllPath = '/v1/goals';

  /**
   * lista todos modelos
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `goalControllerListAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  goalControllerListAll$Response(params?: GoalControllerListAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<GoalListDto>>> {
    return goalControllerListAll(this.http, this.rootUrl, params, context);
  }

  /**
   * lista todos modelos
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `goalControllerListAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  goalControllerListAll(params?: GoalControllerListAll$Params, context?: HttpContext): Observable<Array<GoalListDto>> {
    return this.goalControllerListAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<GoalListDto>>): Array<GoalListDto> => r.body)
    );
  }

  /** Path part for operation `goalControllerCreate()` */
  static readonly GoalControllerCreatePath = '/v1/goals';

  /**
   * Método utilizado para realizar a inclusão de um entidade
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `goalControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  goalControllerCreate$Response(params: GoalControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<GoalDto>> {
    return goalControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * Método utilizado para realizar a inclusão de um entidade
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `goalControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  goalControllerCreate(params: GoalControllerCreate$Params, context?: HttpContext): Observable<GoalDto> {
    return this.goalControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<GoalDto>): GoalDto => r.body)
    );
  }

  /** Path part for operation `goalControllerSearchFieldsList()` */
  static readonly GoalControllerSearchFieldsListPath = '/v1/goals/search-fields';

  /**
   * Listagem dos campos de busca
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `goalControllerSearchFieldsList()` instead.
   *
   * This method doesn't expect any request body.
   */
  goalControllerSearchFieldsList$Response(params?: GoalControllerSearchFieldsList$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SearchField>>> {
    return goalControllerSearchFieldsList(this.http, this.rootUrl, params, context);
  }

  /**
   * Listagem dos campos de busca
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `goalControllerSearchFieldsList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  goalControllerSearchFieldsList(params?: GoalControllerSearchFieldsList$Params, context?: HttpContext): Observable<Array<SearchField>> {
    return this.goalControllerSearchFieldsList$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SearchField>>): Array<SearchField> => r.body)
    );
  }

  /** Path part for operation `goalControllerSearchFieldsAction()` */
  static readonly GoalControllerSearchFieldsActionPath = '/v1/goals/search-fields';

  /**
   * Realiza a busca pelos valores dos campos informados
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `goalControllerSearchFieldsAction()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  goalControllerSearchFieldsAction$Response(params: GoalControllerSearchFieldsAction$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<GoalListDto>>> {
    return goalControllerSearchFieldsAction(this.http, this.rootUrl, params, context);
  }

  /**
   * Realiza a busca pelos valores dos campos informados
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `goalControllerSearchFieldsAction$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  goalControllerSearchFieldsAction(params: GoalControllerSearchFieldsAction$Params, context?: HttpContext): Observable<Array<GoalListDto>> {
    return this.goalControllerSearchFieldsAction$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<GoalListDto>>): Array<GoalListDto> => r.body)
    );
  }

  /** Path part for operation `goalControllerSearchFieldsActionPage()` */
  static readonly GoalControllerSearchFieldsActionPagePath = '/v1/goals/search-fields/page';

  /**
   * Realiza a busca pelos valores dos campos informados
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `goalControllerSearchFieldsActionPage()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  goalControllerSearchFieldsActionPage$Response(params: GoalControllerSearchFieldsActionPage$Params, context?: HttpContext): Observable<StrictHttpResponse<PageGoalListDto>> {
    return goalControllerSearchFieldsActionPage(this.http, this.rootUrl, params, context);
  }

  /**
   * Realiza a busca pelos valores dos campos informados
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `goalControllerSearchFieldsActionPage$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  goalControllerSearchFieldsActionPage(params: GoalControllerSearchFieldsActionPage$Params, context?: HttpContext): Observable<PageGoalListDto> {
    return this.goalControllerSearchFieldsActionPage$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageGoalListDto>): PageGoalListDto => r.body)
    );
  }

  /** Path part for operation `goalControllerSearchFieldsActionPage_1()` */
  static readonly GoalControllerSearchFieldsActionPage_1Path = '/v1/goals/search-fields/page/user/{id}';

  /**
   * Realiza a busca pelos valores dos campos informados
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `goalControllerSearchFieldsActionPage_1()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  goalControllerSearchFieldsActionPage_1$Response(params: GoalControllerSearchFieldsActionPage_1$Params, context?: HttpContext): Observable<StrictHttpResponse<PageGoalListDto>> {
    return goalControllerSearchFieldsActionPage_1(this.http, this.rootUrl, params, context);
  }

  /**
   * Realiza a busca pelos valores dos campos informados
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `goalControllerSearchFieldsActionPage_1$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  goalControllerSearchFieldsActionPage_1(params: GoalControllerSearchFieldsActionPage_1$Params, context?: HttpContext): Observable<PageGoalListDto> {
    return this.goalControllerSearchFieldsActionPage_1$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageGoalListDto>): PageGoalListDto => r.body)
    );
  }

  /** Path part for operation `goalControllerGetByUserId()` */
  static readonly GoalControllerGetByUserIdPath = '/v1/goals/user/{id}';

  /**
   * Obter os dados completos de uma entidiade pelo id do usuario informado!
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `goalControllerGetByUserId()` instead.
   *
   * This method doesn't expect any request body.
   */
  goalControllerGetByUserId$Response(params: GoalControllerGetByUserId$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<GoalListDto>>> {
    return goalControllerGetByUserId(this.http, this.rootUrl, params, context);
  }

  /**
   * Obter os dados completos de uma entidiade pelo id do usuario informado!
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `goalControllerGetByUserId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  goalControllerGetByUserId(params: GoalControllerGetByUserId$Params, context?: HttpContext): Observable<Array<GoalListDto>> {
    return this.goalControllerGetByUserId$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<GoalListDto>>): Array<GoalListDto> => r.body)
    );
  }

  /** Path part for operation `goalControllerListAllPage()` */
  static readonly GoalControllerListAllPagePath = '/v1/goals/page';

  /**
   * lista todos modelos paginada
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `goalControllerListAllPage()` instead.
   *
   * This method doesn't expect any request body.
   */
  goalControllerListAllPage$Response(params: GoalControllerListAllPage$Params, context?: HttpContext): Observable<StrictHttpResponse<PageGoalListDto>> {
    return goalControllerListAllPage(this.http, this.rootUrl, params, context);
  }

  /**
   * lista todos modelos paginada
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `goalControllerListAllPage$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  goalControllerListAllPage(params: GoalControllerListAllPage$Params, context?: HttpContext): Observable<PageGoalListDto> {
    return this.goalControllerListAllPage$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageGoalListDto>): PageGoalListDto => r.body)
    );
  }

  /** Path part for operation `goalControllerListAllPageByUser()` */
  static readonly GoalControllerListAllPageByUserPath = '/v1/goals/page/user/{id}';

  /**
   * lista todos modelos paginada
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `goalControllerListAllPageByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  goalControllerListAllPageByUser$Response(params: GoalControllerListAllPageByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<PageGoalListDto>> {
    return goalControllerListAllPageByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * lista todos modelos paginada
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `goalControllerListAllPageByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  goalControllerListAllPageByUser(params: GoalControllerListAllPageByUser$Params, context?: HttpContext): Observable<PageGoalListDto> {
    return this.goalControllerListAllPageByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageGoalListDto>): PageGoalListDto => r.body)
    );
  }

}
