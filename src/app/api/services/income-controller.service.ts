/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { incomeControllerCreate } from '../fn/income-controller/income-controller-create';
import { IncomeControllerCreate$Params } from '../fn/income-controller/income-controller-create';
import { incomeControllerGetById } from '../fn/income-controller/income-controller-get-by-id';
import { IncomeControllerGetById$Params } from '../fn/income-controller/income-controller-get-by-id';
import { incomeControllerGetByUserId } from '../fn/income-controller/income-controller-get-by-user-id';
import { IncomeControllerGetByUserId$Params } from '../fn/income-controller/income-controller-get-by-user-id';
import { incomeControllerListAll } from '../fn/income-controller/income-controller-list-all';
import { IncomeControllerListAll$Params } from '../fn/income-controller/income-controller-list-all';
import { incomeControllerListAllPage } from '../fn/income-controller/income-controller-list-all-page';
import { IncomeControllerListAllPage$Params } from '../fn/income-controller/income-controller-list-all-page';
import { incomeControllerListAllPageByUser } from '../fn/income-controller/income-controller-list-all-page-by-user';
import { IncomeControllerListAllPageByUser$Params } from '../fn/income-controller/income-controller-list-all-page-by-user';
import { incomeControllerRemove } from '../fn/income-controller/income-controller-remove';
import { IncomeControllerRemove$Params } from '../fn/income-controller/income-controller-remove';
import { incomeControllerSearchFieldsAction } from '../fn/income-controller/income-controller-search-fields-action';
import { IncomeControllerSearchFieldsAction$Params } from '../fn/income-controller/income-controller-search-fields-action';
import { incomeControllerSearchFieldsActionPage } from '../fn/income-controller/income-controller-search-fields-action-page';
import { incomeControllerSearchFieldsActionPage_1 } from '../fn/income-controller/income-controller-search-fields-action-page-1';
import { IncomeControllerSearchFieldsActionPage_1$Params } from '../fn/income-controller/income-controller-search-fields-action-page-1';
import { IncomeControllerSearchFieldsActionPage$Params } from '../fn/income-controller/income-controller-search-fields-action-page';
import { incomeControllerSearchFieldsList } from '../fn/income-controller/income-controller-search-fields-list';
import { IncomeControllerSearchFieldsList$Params } from '../fn/income-controller/income-controller-search-fields-list';
import { incomeControllerUpdate } from '../fn/income-controller/income-controller-update';
import { IncomeControllerUpdate$Params } from '../fn/income-controller/income-controller-update';
import { IncomeDto } from '../models/income-dto';
import { IncomeListDto } from '../models/income-list-dto';
import { PageIncomeListDto } from '../models/page-income-list-dto';
import { SearchField } from '../models/search-field';

@Injectable({ providedIn: 'root' })
export class IncomeControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `incomeControllerGetById()` */
  static readonly IncomeControllerGetByIdPath = '/v1/incomes/{id}';

  /**
   * Obter os dados completos de uma entidiade pelo id informado!
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `incomeControllerGetById()` instead.
   *
   * This method doesn't expect any request body.
   */
  incomeControllerGetById$Response(params: IncomeControllerGetById$Params, context?: HttpContext): Observable<StrictHttpResponse<IncomeDto>> {
    return incomeControllerGetById(this.http, this.rootUrl, params, context);
  }

  /**
   * Obter os dados completos de uma entidiade pelo id informado!
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `incomeControllerGetById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  incomeControllerGetById(params: IncomeControllerGetById$Params, context?: HttpContext): Observable<IncomeDto> {
    return this.incomeControllerGetById$Response(params, context).pipe(
      map((r: StrictHttpResponse<IncomeDto>): IncomeDto => r.body)
    );
  }

  /** Path part for operation `incomeControllerUpdate()` */
  static readonly IncomeControllerUpdatePath = '/v1/incomes/{id}';

  /**
   * Método utilizado para altlerar os dados de uma entidiade
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `incomeControllerUpdate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  incomeControllerUpdate$Response(params: IncomeControllerUpdate$Params, context?: HttpContext): Observable<StrictHttpResponse<IncomeDto>> {
    return incomeControllerUpdate(this.http, this.rootUrl, params, context);
  }

  /**
   * Método utilizado para altlerar os dados de uma entidiade
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `incomeControllerUpdate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  incomeControllerUpdate(params: IncomeControllerUpdate$Params, context?: HttpContext): Observable<IncomeDto> {
    return this.incomeControllerUpdate$Response(params, context).pipe(
      map((r: StrictHttpResponse<IncomeDto>): IncomeDto => r.body)
    );
  }

  /** Path part for operation `incomeControllerRemove()` */
  static readonly IncomeControllerRemovePath = '/v1/incomes/{id}';

  /**
   * Método utilizado para remover uma entidiade pela id informado
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `incomeControllerRemove()` instead.
   *
   * This method doesn't expect any request body.
   */
  incomeControllerRemove$Response(params: IncomeControllerRemove$Params, context?: HttpContext): Observable<StrictHttpResponse<IncomeDto>> {
    return incomeControllerRemove(this.http, this.rootUrl, params, context);
  }

  /**
   * Método utilizado para remover uma entidiade pela id informado
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `incomeControllerRemove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  incomeControllerRemove(params: IncomeControllerRemove$Params, context?: HttpContext): Observable<IncomeDto> {
    return this.incomeControllerRemove$Response(params, context).pipe(
      map((r: StrictHttpResponse<IncomeDto>): IncomeDto => r.body)
    );
  }

  /** Path part for operation `incomeControllerListAll()` */
  static readonly IncomeControllerListAllPath = '/v1/incomes';

  /**
   * lista todos modelos
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `incomeControllerListAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  incomeControllerListAll$Response(params?: IncomeControllerListAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<IncomeListDto>>> {
    return incomeControllerListAll(this.http, this.rootUrl, params, context);
  }

  /**
   * lista todos modelos
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `incomeControllerListAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  incomeControllerListAll(params?: IncomeControllerListAll$Params, context?: HttpContext): Observable<Array<IncomeListDto>> {
    return this.incomeControllerListAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<IncomeListDto>>): Array<IncomeListDto> => r.body)
    );
  }

  /** Path part for operation `incomeControllerCreate()` */
  static readonly IncomeControllerCreatePath = '/v1/incomes';

  /**
   * Método utilizado para realizar a inclusão de um entidade
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `incomeControllerCreate()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  incomeControllerCreate$Response(params: IncomeControllerCreate$Params, context?: HttpContext): Observable<StrictHttpResponse<IncomeDto>> {
    return incomeControllerCreate(this.http, this.rootUrl, params, context);
  }

  /**
   * Método utilizado para realizar a inclusão de um entidade
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `incomeControllerCreate$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  incomeControllerCreate(params: IncomeControllerCreate$Params, context?: HttpContext): Observable<IncomeDto> {
    return this.incomeControllerCreate$Response(params, context).pipe(
      map((r: StrictHttpResponse<IncomeDto>): IncomeDto => r.body)
    );
  }

  /** Path part for operation `incomeControllerSearchFieldsList()` */
  static readonly IncomeControllerSearchFieldsListPath = '/v1/incomes/search-fields';

  /**
   * Listagem dos campos de busca
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `incomeControllerSearchFieldsList()` instead.
   *
   * This method doesn't expect any request body.
   */
  incomeControllerSearchFieldsList$Response(params?: IncomeControllerSearchFieldsList$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<SearchField>>> {
    return incomeControllerSearchFieldsList(this.http, this.rootUrl, params, context);
  }

  /**
   * Listagem dos campos de busca
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `incomeControllerSearchFieldsList$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  incomeControllerSearchFieldsList(params?: IncomeControllerSearchFieldsList$Params, context?: HttpContext): Observable<Array<SearchField>> {
    return this.incomeControllerSearchFieldsList$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<SearchField>>): Array<SearchField> => r.body)
    );
  }

  /** Path part for operation `incomeControllerSearchFieldsAction()` */
  static readonly IncomeControllerSearchFieldsActionPath = '/v1/incomes/search-fields';

  /**
   * Realiza a busca pelos valores dos campos informados
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `incomeControllerSearchFieldsAction()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  incomeControllerSearchFieldsAction$Response(params: IncomeControllerSearchFieldsAction$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<IncomeListDto>>> {
    return incomeControllerSearchFieldsAction(this.http, this.rootUrl, params, context);
  }

  /**
   * Realiza a busca pelos valores dos campos informados
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `incomeControllerSearchFieldsAction$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  incomeControllerSearchFieldsAction(params: IncomeControllerSearchFieldsAction$Params, context?: HttpContext): Observable<Array<IncomeListDto>> {
    return this.incomeControllerSearchFieldsAction$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<IncomeListDto>>): Array<IncomeListDto> => r.body)
    );
  }

  /** Path part for operation `incomeControllerSearchFieldsActionPage()` */
  static readonly IncomeControllerSearchFieldsActionPagePath = '/v1/incomes/search-fields/page';

  /**
   * Realiza a busca pelos valores dos campos informados
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `incomeControllerSearchFieldsActionPage()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  incomeControllerSearchFieldsActionPage$Response(params: IncomeControllerSearchFieldsActionPage$Params, context?: HttpContext): Observable<StrictHttpResponse<PageIncomeListDto>> {
    return incomeControllerSearchFieldsActionPage(this.http, this.rootUrl, params, context);
  }

  /**
   * Realiza a busca pelos valores dos campos informados
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `incomeControllerSearchFieldsActionPage$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  incomeControllerSearchFieldsActionPage(params: IncomeControllerSearchFieldsActionPage$Params, context?: HttpContext): Observable<PageIncomeListDto> {
    return this.incomeControllerSearchFieldsActionPage$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageIncomeListDto>): PageIncomeListDto => r.body)
    );
  }

  /** Path part for operation `incomeControllerSearchFieldsActionPage_1()` */
  static readonly IncomeControllerSearchFieldsActionPage_1Path = '/v1/incomes/search-fields/page/user/{id}';

  /**
   * Realiza a busca pelos valores dos campos informados
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `incomeControllerSearchFieldsActionPage_1()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  incomeControllerSearchFieldsActionPage_1$Response(params: IncomeControllerSearchFieldsActionPage_1$Params, context?: HttpContext): Observable<StrictHttpResponse<PageIncomeListDto>> {
    return incomeControllerSearchFieldsActionPage_1(this.http, this.rootUrl, params, context);
  }

  /**
   * Realiza a busca pelos valores dos campos informados
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `incomeControllerSearchFieldsActionPage_1$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  incomeControllerSearchFieldsActionPage_1(params: IncomeControllerSearchFieldsActionPage_1$Params, context?: HttpContext): Observable<PageIncomeListDto> {
    return this.incomeControllerSearchFieldsActionPage_1$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageIncomeListDto>): PageIncomeListDto => r.body)
    );
  }

  /** Path part for operation `incomeControllerGetByUserId()` */
  static readonly IncomeControllerGetByUserIdPath = '/v1/incomes/user/{id}';

  /**
   * Obter os dados completos de uma entidiade pelo id do usuario informado!
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `incomeControllerGetByUserId()` instead.
   *
   * This method doesn't expect any request body.
   */
  incomeControllerGetByUserId$Response(params: IncomeControllerGetByUserId$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<IncomeListDto>>> {
    return incomeControllerGetByUserId(this.http, this.rootUrl, params, context);
  }

  /**
   * Obter os dados completos de uma entidiade pelo id do usuario informado!
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `incomeControllerGetByUserId$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  incomeControllerGetByUserId(params: IncomeControllerGetByUserId$Params, context?: HttpContext): Observable<Array<IncomeListDto>> {
    return this.incomeControllerGetByUserId$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<IncomeListDto>>): Array<IncomeListDto> => r.body)
    );
  }

  /** Path part for operation `incomeControllerListAllPage()` */
  static readonly IncomeControllerListAllPagePath = '/v1/incomes/page';

  /**
   * lista todos modelos paginada
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `incomeControllerListAllPage()` instead.
   *
   * This method doesn't expect any request body.
   */
  incomeControllerListAllPage$Response(params: IncomeControllerListAllPage$Params, context?: HttpContext): Observable<StrictHttpResponse<PageIncomeListDto>> {
    return incomeControllerListAllPage(this.http, this.rootUrl, params, context);
  }

  /**
   * lista todos modelos paginada
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `incomeControllerListAllPage$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  incomeControllerListAllPage(params: IncomeControllerListAllPage$Params, context?: HttpContext): Observable<PageIncomeListDto> {
    return this.incomeControllerListAllPage$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageIncomeListDto>): PageIncomeListDto => r.body)
    );
  }

  /** Path part for operation `incomeControllerListAllPageByUser()` */
  static readonly IncomeControllerListAllPageByUserPath = '/v1/incomes/page/user/{id}';

  /**
   * lista todos modelos paginada
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `incomeControllerListAllPageByUser()` instead.
   *
   * This method doesn't expect any request body.
   */
  incomeControllerListAllPageByUser$Response(params: IncomeControllerListAllPageByUser$Params, context?: HttpContext): Observable<StrictHttpResponse<PageIncomeListDto>> {
    return incomeControllerListAllPageByUser(this.http, this.rootUrl, params, context);
  }

  /**
   * lista todos modelos paginada
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `incomeControllerListAllPageByUser$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  incomeControllerListAllPageByUser(params: IncomeControllerListAllPageByUser$Params, context?: HttpContext): Observable<PageIncomeListDto> {
    return this.incomeControllerListAllPageByUser$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageIncomeListDto>): PageIncomeListDto => r.body)
    );
  }

}
