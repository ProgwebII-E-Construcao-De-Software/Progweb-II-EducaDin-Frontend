/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { CategoryDto } from '../models/category-dto';
import { create } from '../fn/category-controller/create';
import { Create$Params } from '../fn/category-controller/create';
import { getById } from '../fn/category-controller/get-by-id';
import { GetById$Params } from '../fn/category-controller/get-by-id';
import { getExpenseCategories } from '../fn/category-controller/get-expense-categories';
import { GetExpenseCategories$Params } from '../fn/category-controller/get-expense-categories';
import { getIncomeCategories } from '../fn/category-controller/get-income-categories';
import { GetIncomeCategories$Params } from '../fn/category-controller/get-income-categories';
import { listAll } from '../fn/category-controller/list-all';
import { ListAll$Params } from '../fn/category-controller/list-all';
import { remove } from '../fn/category-controller/remove';
import { Remove$Params } from '../fn/category-controller/remove';
import { update } from '../fn/category-controller/update';
import { Update$Params } from '../fn/category-controller/update';

@Injectable({ providedIn: 'root' })
export class CategoryControllerService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getById()` */
  static readonly GetByIdPath = '/1.0/categories/{id}';

  /**
   * End point para obter dados por id
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getById()` instead.
   *
   * This method doesn't expect any request body.
   */
  getById$Response(params: GetById$Params, context?: HttpContext): Observable<StrictHttpResponse<CategoryDto>> {
    return getById(this.http, this.rootUrl, params, context);
  }

  /**
   * End point para obter dados por id
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getById(params: GetById$Params, context?: HttpContext): Observable<CategoryDto> {
    return this.getById$Response(params, context).pipe(
      map((r: StrictHttpResponse<CategoryDto>): CategoryDto => r.body)
    );
  }

  /** Path part for operation `update()` */
  static readonly UpdatePath = '/1.0/categories/{id}';

  /**
   * End point para atualização de dados
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `update()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update$Response(params: Update$Params, context?: HttpContext): Observable<StrictHttpResponse<CategoryDto>> {
    return update(this.http, this.rootUrl, params, context);
  }

  /**
   * End point para atualização de dados
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `update$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  update(params: Update$Params, context?: HttpContext): Observable<CategoryDto> {
    return this.update$Response(params, context).pipe(
      map((r: StrictHttpResponse<CategoryDto>): CategoryDto => r.body)
    );
  }

  /** Path part for operation `remove()` */
  static readonly RemovePath = '/1.0/categories/{id}';

  /**
   * End point para remover dados por id
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `remove()` instead.
   *
   * This method doesn't expect any request body.
   */
  remove$Response(params: Remove$Params, context?: HttpContext): Observable<StrictHttpResponse<CategoryDto>> {
    return remove(this.http, this.rootUrl, params, context);
  }

  /**
   * End point para remover dados por id
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `remove$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  remove(params: Remove$Params, context?: HttpContext): Observable<CategoryDto> {
    return this.remove$Response(params, context).pipe(
      map((r: StrictHttpResponse<CategoryDto>): CategoryDto => r.body)
    );
  }

  /** Path part for operation `listAll()` */
  static readonly ListAllPath = '/1.0/categories';

  /**
   * lista todos os dados
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `listAll()` instead.
   *
   * This method doesn't expect any request body.
   */
  listAll$Response(params?: ListAll$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CategoryDto>>> {
    return listAll(this.http, this.rootUrl, params, context);
  }

  /**
   * lista todos os dados
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `listAll$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  listAll(params?: ListAll$Params, context?: HttpContext): Observable<Array<CategoryDto>> {
    return this.listAll$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CategoryDto>>): Array<CategoryDto> => r.body)
    );
  }

  /** Path part for operation `create()` */
  static readonly CreatePath = '/1.0/categories';

  /**
   * End point para inclusão de dados
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `create()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create$Response(params: Create$Params, context?: HttpContext): Observable<StrictHttpResponse<CategoryDto>> {
    return create(this.http, this.rootUrl, params, context);
  }

  /**
   * End point para inclusão de dados
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `create$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  create(params: Create$Params, context?: HttpContext): Observable<CategoryDto> {
    return this.create$Response(params, context).pipe(
      map((r: StrictHttpResponse<CategoryDto>): CategoryDto => r.body)
    );
  }

  /** Path part for operation `getIncomeCategories()` */
  static readonly GetIncomeCategoriesPath = '/1.0/categories/incomes';

  /**
   * End point para listar todas as categorias de receitas
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getIncomeCategories()` instead.
   *
   * This method doesn't expect any request body.
   */
  getIncomeCategories$Response(params?: GetIncomeCategories$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CategoryDto>>> {
    return getIncomeCategories(this.http, this.rootUrl, params, context);
  }

  /**
   * End point para listar todas as categorias de receitas
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getIncomeCategories$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getIncomeCategories(params?: GetIncomeCategories$Params, context?: HttpContext): Observable<Array<CategoryDto>> {
    return this.getIncomeCategories$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CategoryDto>>): Array<CategoryDto> => r.body)
    );
  }

  /** Path part for operation `getExpenseCategories()` */
  static readonly GetExpenseCategoriesPath = '/1.0/categories/expenses';

  /**
   * End point para listar todas as categorias de despesas
   *
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getExpenseCategories()` instead.
   *
   * This method doesn't expect any request body.
   */
  getExpenseCategories$Response(params?: GetExpenseCategories$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<CategoryDto>>> {
    return getExpenseCategories(this.http, this.rootUrl, params, context);
  }

  /**
   * End point para listar todas as categorias de despesas
   *
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getExpenseCategories$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getExpenseCategories(params?: GetExpenseCategories$Params, context?: HttpContext): Observable<Array<CategoryDto>> {
    return this.getExpenseCategories$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<CategoryDto>>): Array<CategoryDto> => r.body)
    );
  }

}
